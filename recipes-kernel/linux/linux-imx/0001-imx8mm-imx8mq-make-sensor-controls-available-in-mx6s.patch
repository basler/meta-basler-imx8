From ad9779dcbbf19a321db1032a63f790f23fe46c95 Mon Sep 17 00:00:00 2001
From: Michael Singer <michael.singer@baslerweb.com>
Date: Thu, 14 Nov 2019 18:59:13 +0100
Subject: [PATCH 01/20] [imx8mm, imx8mq] make sensor controls available in
 mx6s_capture

Our sensor driver provides V4L Extended Controls that need to be made available
through the /dev/videoX file.
---
 drivers/media/platform/imx8/mxc-mipi-csi2.h   |   3 +
 .../media/platform/imx8/mxc-mipi-csi2_yav.c   |  17 ++-
 .../media/platform/mxc/capture/mx6s_capture.c | 106 +++++++++++++++++-
 .../media/platform/mxc/capture/mxc_mipi_csi.c |  19 +++-
 4 files changed, 142 insertions(+), 3 deletions(-)

diff --git a/drivers/media/platform/imx8/mxc-mipi-csi2.h b/drivers/media/platform/imx8/mxc-mipi-csi2.h
index 3306f5322..bfc60797c 100644
--- a/drivers/media/platform/imx8/mxc-mipi-csi2.h
+++ b/drivers/media/platform/imx8/mxc-mipi-csi2.h
@@ -7,6 +7,7 @@
 #define MXC_MIPI_CSI2_H_
 
 #include <media/v4l2-device.h>
+#include <media/v4l2-ctrls.h>
 
 #define MXC_MIPI_CSI2_DRIVER_NAME	"mxc-mipi-csi2"
 #define MXC_MIPI_CSI2_SUBDEV_NAME	MXC_MIPI_CSI2_DRIVER_NAME
@@ -253,6 +254,8 @@ struct mxc_mipi_csi2_dev {
 
 	struct mutex lock;
 
+	struct v4l2_ctrl_handler ctrl_handler;
+
 	int	 id;
 	u32 hs_settle;
 	u32 send_level;
diff --git a/drivers/media/platform/imx8/mxc-mipi-csi2_yav.c b/drivers/media/platform/imx8/mxc-mipi-csi2_yav.c
index 9fa951b50..fa3fbef37 100644
--- a/drivers/media/platform/imx8/mxc-mipi-csi2_yav.c
+++ b/drivers/media/platform/imx8/mxc-mipi-csi2_yav.c
@@ -25,6 +25,7 @@
 #include <media/v4l2-fwnode.h>
 #include <media/v4l2-subdev.h>
 #include <media/v4l2-device.h>
+#include <media/v4l2-ctrls.h>
 
 #include "mxc-mipi-csi2.h"
 static int debug;
@@ -487,6 +488,9 @@ static int subdev_notifier_bound(struct v4l2_async_notifier *notifier,
 	if (csi2dev->fwnode == of_fwnode_handle(subdev->dev->of_node))
 		csi2dev->sensor_sd = subdev;
 
+	v4l2_ctrl_add_handler(csi2dev->sd.ctrl_handler, subdev->ctrl_handler,
+		  NULL, true);
+
 	v4l2_info(&csi2dev->v4l2_dev, "Registered sensor subdevice: %s\n",
 		  subdev->name);
 
@@ -594,11 +598,18 @@ static int mipi_csi2_probe(struct platform_device *pdev)
 	csi2dev->sd.flags |= V4L2_SUBDEV_FL_HAS_DEVNODE;
 	csi2dev->sd.dev = &pdev->dev;
 
+	/* Add the control handler */
+	v4l2_ctrl_handler_init(&csi2dev->ctrl_handler, 10);
+	if (csi2dev->ctrl_handler.error)
+		return csi2dev->ctrl_handler.error;
+	csi2dev->sd.ctrl_handler = &csi2dev->ctrl_handler;
+
 	/* First register a v4l2 device */
 	ret = v4l2_device_register(dev, &csi2dev->v4l2_dev);
 	if (ret) {
 		dev_err(&pdev->dev, "Unable to register v4l2 device.\n");
-		return -EINVAL;
+		ret = -EINVAL;
+		goto e_handler;
 	}
 	ret = v4l2_async_register_subdev(&csi2dev->sd);
 	if (ret < 0) {
@@ -635,6 +646,8 @@ static int mipi_csi2_probe(struct platform_device *pdev)
 	v4l2_async_unregister_subdev(&csi2dev->sd);
 e_v4l_dev:
 	v4l2_device_unregister(&csi2dev->v4l2_dev);
+e_handler:
+	v4l2_ctrl_handler_free(&csi2dev->ctrl_handler);
 	return ret;
 }
 
@@ -646,6 +659,8 @@ static int mipi_csi2_remove(struct platform_device *pdev)
 	v4l2_async_notifier_cleanup(&csi2dev->subdev_notifier);
 	mipi_csi2_clk_disable(csi2dev);
 	pm_runtime_disable(&pdev->dev);
+	v4l2_ctrl_handler_free(sd->ctrl_handler);
+	sd->ctrl_handler = NULL;
 
 	return 0;
 }
diff --git a/drivers/media/platform/mxc/capture/mx6s_capture.c b/drivers/media/platform/mxc/capture/mx6s_capture.c
index 84f0e40e4..a41516eea 100644
--- a/drivers/media/platform/mxc/capture/mx6s_capture.c
+++ b/drivers/media/platform/mxc/capture/mx6s_capture.c
@@ -1677,6 +1677,102 @@ static int mx6s_vidioc_enum_frameintervals(struct file *file, void *priv,
 	return 0;
 }
 
+static int mx6s_vidioc_queryctrl(struct file *file, void *priv,
+				 struct v4l2_queryctrl *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	if (!sd || !sd->ctrl_handler)
+		return -ENOTTY;
+
+	return v4l2_queryctrl(sd->ctrl_handler, a);
+}
+
+static int mx6s_vidioc_query_ext_ctrl(struct file *file, void *priv,
+				      struct v4l2_query_ext_ctrl *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	if (!sd || !sd->ctrl_handler)
+		return -ENOTTY;
+
+	return v4l2_query_ext_ctrl(sd->ctrl_handler, a);
+}
+
+static int mx6s_vidioc_g_ctrl(struct file *file, void *priv,
+			      struct v4l2_control *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	if (!sd || !sd->ctrl_handler)
+		return -ENOTTY;
+
+	return v4l2_g_ctrl(sd->ctrl_handler, a);
+}
+
+static int mx6s_vidioc_s_ctrl(struct file *file, void *priv,
+			      struct v4l2_control *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	if (!sd || !sd->ctrl_handler)
+		return -ENOTTY;
+
+	return v4l2_s_ctrl(NULL, sd->ctrl_handler, a);
+}
+
+static int mx6s_vidioc_g_ext_ctrls(struct file *file, void *priv,
+				   struct v4l2_ext_controls *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	if (!sd || !sd->ctrl_handler)
+		return -ENOTTY;
+
+	return v4l2_g_ext_ctrls(sd->ctrl_handler, csi_dev->vdev, NULL, a);
+}
+
+static int mx6s_vidioc_s_ext_ctrls(struct file *file, void *priv,
+				   struct v4l2_ext_controls *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	if (!sd || !sd->ctrl_handler)
+		return -ENOTTY;
+
+	return v4l2_s_ext_ctrls(NULL, sd->ctrl_handler, csi_dev->vdev, NULL, a);
+}
+
+static int mx6s_vidioc_try_ext_ctrls(struct file *file, void *priv,
+				     struct v4l2_ext_controls *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	if (!sd || !sd->ctrl_handler)
+		return -ENOTTY;
+
+	return v4l2_try_ext_ctrls(sd->ctrl_handler, csi_dev->vdev, NULL, a);
+}
+
+static int mx6s_vidioc_querymenu(struct file *file, void *priv,
+				 struct v4l2_querymenu *a)
+{
+	struct mx6s_csi_dev *csi_dev = video_drvdata(file);
+	struct v4l2_subdev *sd = csi_dev->sd;
+
+	if (!sd || !sd->ctrl_handler)
+		return -ENOTTY;
+
+	return v4l2_querymenu(sd->ctrl_handler, a);
+}
+
 static const struct v4l2_ioctl_ops mx6s_csi_ioctl_ops = {
 	.vidioc_querycap          = mx6s_vidioc_querycap,
 	.vidioc_enum_fmt_vid_cap  = mx6s_vidioc_enum_fmt_vid_cap,
@@ -1703,6 +1799,14 @@ static const struct v4l2_ioctl_ops mx6s_csi_ioctl_ops = {
 	.vidioc_s_parm        = mx6s_vidioc_s_parm,
 	.vidioc_enum_framesizes = mx6s_vidioc_enum_framesizes,
 	.vidioc_enum_frameintervals = mx6s_vidioc_enum_frameintervals,
+	.vidioc_queryctrl      = mx6s_vidioc_queryctrl,
+	.vidioc_query_ext_ctrl = mx6s_vidioc_query_ext_ctrl,
+	.vidioc_g_ctrl         = mx6s_vidioc_g_ctrl,
+	.vidioc_s_ctrl         = mx6s_vidioc_s_ctrl,
+	.vidioc_g_ext_ctrls    = mx6s_vidioc_g_ext_ctrls,
+	.vidioc_s_ext_ctrls    = mx6s_vidioc_s_ext_ctrls,
+	.vidioc_try_ext_ctrls  = mx6s_vidioc_try_ext_ctrls,
+	.vidioc_querymenu      = mx6s_vidioc_querymenu,
 };
 
 static int subdev_notifier_bound(struct v4l2_async_notifier *notifier,
@@ -1827,7 +1931,7 @@ static int mx6sx_register_subdevs(struct mx6s_csi_dev *csi_dev)
 					&csi_dev->subdev_notifier);
 	if (ret)
 		dev_err(csi_dev->dev,
-					"Error register async notifier regoster\n");
+					"Error registering async notifier\n");
 
 	return ret;
 }
diff --git a/drivers/media/platform/mxc/capture/mxc_mipi_csi.c b/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
index a722f38fe..3e543cfa5 100644
--- a/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
+++ b/drivers/media/platform/mxc/capture/mxc_mipi_csi.c
@@ -38,6 +38,7 @@
 #include <linux/videodev2.h>
 #include <media/v4l2-subdev.h>
 #include <media/v4l2-device.h>
+#include <media/v4l2-ctrls.h>
 
 static int debug;
 module_param(debug, int, 0644);
@@ -291,6 +292,8 @@ struct csi_state {
 
 	struct csis_hw_reset hw_reset;
 	struct regulator     *mipi_phy_regulator;
+
+	struct v4l2_ctrl_handler ctrl_handler;
 };
 
 /**
@@ -935,6 +938,9 @@ static int subdev_notifier_bound(struct v4l2_async_notifier *notifier,
 	if (state->fwnode == dev_fwnode(subdev->dev))
 		state->sensor_sd = subdev;
 
+	v4l2_ctrl_add_handler(state->mipi_sd.ctrl_handler, subdev->ctrl_handler,
+		  NULL, true);
+
 	v4l2_info(&state->v4l2_dev, "Registered sensor subdevice: %s\n",
 		  subdev->name);
 
@@ -1133,12 +1139,20 @@ static int mipi_csis_probe(struct platform_device *pdev)
 		goto e_clkdis;
 	}
 
+	/* Add the control handler */
+	v4l2_ctrl_handler_init(&state->ctrl_handler, 10);
+	if (state->ctrl_handler.error) {
+		ret = state->ctrl_handler.error;
+		goto e_clkdis;
+	}
+	state->mipi_sd.ctrl_handler = &state->ctrl_handler;
+
 	/* First register a v4l2 device */
 	ret = v4l2_device_register(dev, &state->v4l2_dev);
 	if (ret) {
 		v4l2_err(dev->driver,
 			"Unable to register v4l2 device.\n");
-		goto e_clkdis;
+		goto e_handler;
 	}
 	v4l2_info(&state->v4l2_dev, "mipi csi v4l2 device registered\n");
 
@@ -1175,6 +1189,8 @@ static int mipi_csis_probe(struct platform_device *pdev)
 	v4l2_device_unregister(&state->v4l2_dev);
 e_sd_mipi:
 	v4l2_async_unregister_subdev(&state->mipi_sd);
+e_handler:
+	v4l2_ctrl_handler_free(&state->ctrl_handler);
 e_clkdis:
 	mipi_csis_clk_disable(state);
 	return ret;
@@ -1276,6 +1292,7 @@ static int mipi_csis_remove(struct platform_device *pdev)
 	v4l2_async_notifier_cleanup(&state->subdev_notifier);
 	v4l2_async_notifier_unregister(&state->subdev_notifier);
 	v4l2_device_unregister(&state->v4l2_dev);
+	v4l2_ctrl_handler_free(&state->ctrl_handler);
 
 	pm_runtime_disable(&pdev->dev);
 	mipi_csis_pm_suspend(&pdev->dev, true);
-- 
2.34.1

